program -> block eof ( :D )

block ->  {statements} ( :D )

stmnts -> stmnt stmnts (:D)
        |stmnt (:D)
        | \n (:D)

stmnt -> declaration (:D)
        | var = expression (:D)
        | fn arg ident funcDataType block (:D)
        | if expression block else block
        | if expression block
        | while expression block
        | call (:D)


ident -> id (:D)

call ->| var(params) (:D)
        |var() (:D)


arg -> (paramDecl) (:D)
       |() (:D)

declaration -> let ident datatype (:D)

paramDecl -> declaration, paramDecl (:D)
            | declaration (:D)

params -> expression, params (:D)
         |expression (:D)

var ->  |*var (:D)
        |[literal] var (:D)
        |(var) (:D)
        |id (:D)


literal -> address (:D)
        |byte (:D)
        |bool (:D)

address -> &address (:D)
           |&var (:D)

funcDataType -> void (:D)
               |datatype (:D)

dataType -> [literal]datatype (:D)
            |*datatype (:D)
            |typeBool(:D)
            |typeByte(:D)



expression -> expressionP9 || expression
            |expressionP9

expressionP9 -> expressionP8 &&  expressionP9
             |expressionP8


expressionP8 -> expressionP7 == expressionP8
              |expressionP7 != expressionP8
              |expressionP7

expressionP7 -> expressionP6 < expressionP7
            | expressionP6 <= expressionP7
            | expressionP6 > expressionP7
            | expressionP6 >= expressionP7
            | expressionP6

expressionP6 -> expressionP5 | expressionP6
             | expressionP5

expressionP5 -> expressionP4 ^ expressionP5
               |expressionP4

expressionP4 -> expressionP3 & expressionP4
              |expressionP3

expressionP3 -> expressionP2 >> expressionP3
              |expressionP2 << expressionP3
              |expressionP2

expressionP2 -> expressionP1 + expressionP2
              |expressionP1 - expressionP2
              |expressionP1

expressionP1 -> expressionP0 % expressionP1
              |expressionP0 / expressionP1
              |expressionP0 * expressionP1
              |expressionP0

expressionP0 -> literal
              |call
              |var
              |(expression)