{
   let updateMonitor bool
    fn win() void{
        let key byte
        let eye [4]byte
        [0]eye = 255
        [1]eye = 255
        [2]eye = 255
        [3]eye = 255

        let smile [2]byte
        [0]smile = 195
        [1]smile = 255

        clean()
        draw(10, 10, 4,$[0]eye)
        draw(20, 10, 4,$[0]eye)
        draw(15, 20, 2,$[0]smile)

        while key != 1{

         key = waitKey()
       }
        return
    }

    fn updateScore(let score byte) byte{
        score = score + 1
        drawFont(0,0,score)
        return score
    }

    fn updateX(let x byte) byte{
         let keyA byte
         let keyD byte

         keyA = 7
         keyD = 9

         if isKeyPressed(keyA){
               x = x - 2
               updateMonitor = true
         }
         if isKeyPressed(keyD){
                 x = x + 2
                 updateMonitor = true

         }
        return x
    }

    fn updateY(let y byte) byte{
           let keyW byte
           let keyS byte

           keyW = 5
           keyS = 8

           if isKeyPressed(keyW){
             y = y - 2
             updateMonitor = true


           }
           if isKeyPressed(keyS){
                     y = y + 2
                     updateMonitor = true

           }
            return y
        }


    fn game(let nPlayer byte, let spritePlayer *byte, let nSeed byte, let spriteSeed *byte) void{
           let xP byte
           let yP byte

           let xS byte
           let yS byte

           let collision bool
           let updateSeed bool

           let keepPlaying bool

           let maxScore byte
           let score byte

           keepPlaying = true

           xP = 10
           yP = 10

           collision = false
           updateSeed = true

           updateMonitor = true

           maxScore = 1
           score = 0

           drawFont(0,0,score)

           while keepPlaying{

                if updateSeed{
                    xS = random()
                    yS = random()
                    updateMonitor = true
                    updateSeed = false
                }

                if updateMonitor{
                    clean()

                    draw(xS,yS, nSeed, spriteSeed)
                    collision = draw(xP,yP, nPlayer, spritePlayer)
                    if collision{
                      score = updateScore(score)

                       if score>maxScore{

                            keepPlaying = false
                       }
                       updateSeed = collision

                    }else{
                         updateMonitor = false
                         drawFont(0,0,score)

                    }
                }
                if score >= maxScore {
                    keepPlaying = false
                }

                xP = updateX(xP)
                yP = updateY(yP)

           }
           win()
           return

    }

    fn main() void{
        let spritePlayer [4]byte
        let spriteSeed [2]byte
        let pSpritePlayer *byte
        let pSpriteSeed *byte

        [0]spriteSeed = 1
        [1]spriteSeed = 1

        pSpriteSeed = $[0]spriteSeed

        [0]spritePlayer=240
        [1]spritePlayer=240
        [2]spritePlayer=240
        [3]spritePlayer=240

        pSpritePlayer = $[0]spritePlayer

        game(4, pSpritePlayer, 2, pSpriteSeed)

        return
    }
}